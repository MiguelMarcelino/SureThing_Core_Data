syntax = "proto3";

package pt.ulisboa.tecnico.surethingcore;

//option java_package = "pt.ulisboa.tecnico.surething.verifier.proto";
//option java_outer_classname = "SureThingEntities";


/*******************************************/
/* Definition for the SureThing data types */
/*                                         */
/*           Feel free to change           */
/*******************************************/


message LocationProofProto {
	//----------------------------
	// The localization of the prover
	// GPS Coordinates
	string geolocation = 2;
	//----------------------------
	// The id of the user trying to prove his location, also known as prover.
	// Unique id issued by ...
	int64 proverId = 3;
	//----------------------------
	// The id of the verifier that will verify the prover's location proof
	int64 verifierId = 4;
	//----------------------------
	// The id of the Certification Authority that verifies both the identities of the prover and verifier
	// Future enum with previously established ids for the different CAs
	int64 ca = 5;
	//----------------------------
	// The timestamp when the location proof was issued
	// Long representing the milliseconds since January, 1970
	int64 timestamp = 6;
	//----------------------------
	// The evidence of the location proof
	// Still unknown the type of evidence
	string evidence = 7;
	//----------------------------
}

message SignedLocationProofProto {
    //----------------------------
    // The id of the location proof
    // Unique id issued by the Ledger once it is submitted for the first time
	int64 id = 1;
    //----------------------------
    // The location proof itself
    LocationProofProto lp = 2;
    //----------------------------
    // The signature of the location proof
    bytes signature = 3;
}

message LocationProofsProto {
    //----------------------------
    // A list of location proofs
    repeated SignedLocationProofProto locationProofsProto = 1;
}

message MerkleTreeHeadProto {
    //----------------------------
    // The timestamp of the Merkle Hash Tree
    int64 timestamp = 1;
    //----------------------------
    // The number of LPs stored in the Merkle Hash Tree
    int64 treeSize = 2;
    //----------------------------
    // The root of the Merkle Hash Tree
    string merkleTreeRoot = 3;
}

message SignedTreeHeadProto {
    //----------------------------
    // The Merkle Tree Head (MTH)
    MerkleTreeHeadProto mth = 1;
    //----------------------------
    // The signature of the MTH
    bytes signature = 2;
}

message LogContentsProto {
    //----------------------------
    // The id of the log server that stores several location proofs
	fixed32 id = 1;
	//----------------------------
	// A list of location proofs
	LocationProofsProto locationProofs = 2;
	//----------------------------
	// The Signed Tree Head of the Merkle Hash Tree
	SignedTreeHeadProto STH = 3;
}

//Represents a request for a consistency proof between 2 Signed Tree Heads
message ConsistencyProofRequestProto {
    //----------------------------
    // The first STH
    SignedTreeHeadProto sth1 = 1;
    //----------------------------
    // The second STH
    SignedTreeHeadProto sth2 = 2;
}

message AuditResultProto {
    //----------------------------
    // The list of LPs stored in the log
    repeated SignedLocationProofProto merkleTreeElements = 1;
    //----------------------------
    // The number of LPs necessary for an audit proof
    repeated SignedLocationProofProto auditPath = 2;
    //----------------------------
    // The STH of the Merkle Hash Tree
    SignedTreeHeadProto STH = 3;
}

message ConsistencyProofResultProto {
    //----------------------------
    // The list of LPs stored in the log
    repeated SignedLocationProofProto merkleTreeElements = 1;
    //----------------------------
    // The number of LPs necessary for a consistency proof
    repeated SignedLocationProofProto consistencyProofLPs = 2;
   //----------------------------
   // The STH of the Merkle Hash Tree
   SignedTreeHeadProto STH = 3;
}

// SLPT = Signed Location Proof Timestamp
// This acts as a promise that the log server will store the corresponding LP within a fixed interval time
message SLPTProto {
    //----------------------------
    // The id of the log
    fixed32 logId = 1;
    //----------------------------
    // The timestamp of the received request
    int64 timestamp = 2;
    //----------------------------
    // A signed location proof
	SignedLocationProofProto signedLP = 3;
}

message UserSureThingProto {
    //----------------------------
    // The id of the user
	int64 id = 1;
	//----------------------------
	// The username of the user
	string username = 2;
	//----------------------------
	// The password of the user
	string password = 3;
	//----------------------------
	// The JWT of the user to authenticate the user in his actions
	string token = 4;
}